#include <iostream>
#include <cmath>
using namespace std;

// Функція для перевірки, чи точка знаходиться в зеленій області
bool isInGreenArea(double x, double y, double r) {
    // Точка повинна бути в межах квадранта x > 0, y > 0
    if (x >= 0 && y >= 0) {
        // Перевірка, чи точка всередині кола
        if (x * x + y * y <= r * r) {
            // Перевірка, чи точка поза правим трикутником
            if (y <= r - x) {
                return true; // Точка в зеленій зоні
            }
        }
    }
    return false; // Точка не в зеленій зоні
}

// Функція для виконання першого завдання
void task_geom30() {
    int n; // Кількість точок
    double r; // Радіус кола

    cout << "Введіть радіус кола: ";
    cin >> r; // Введення радіусу кола
    cout << "Введіть кількість точок: ";
    cin >> n; // Введення кількості точок

    int count = 0; // Лічильник точок у зеленій зоні

    for (int i = 0; i < n; i++) {
        double x, y; // Координати точки
        cout << "Введіть координати точки " << i + 1 << " (x y): ";
        cin >> x >> y; // Введення координат точки

        // Перевірка, чи точка в зеленій зоні
        if (isInGreenArea(x, y, r)) {
            count++; // Збільшуємо лічильник, якщо точка в зеленій зоні
        }
    }

    cout << "Кількість точок у зеленій зоні: " << count << endl; // Виведення результату
}

// Функція для виконання другого завдання
void task2() {
    double x; // Значення x
    int n;    // Натуральне число n

    cout << "Введіть значення x (2 <= x <= 5): ";
    cin >> x; // Введення значення x
    if (x < 2 || x > 5) { // Перевірка на коректність x
        cout << "Значення x повинно бути в діапазоні [2, 5]." << endl;
        return; // Завершуємо функцію у разі некоректного введення
    }

    cout << "Введіть натуральне число n: ";
    cin >> n; // Введення натурального числа n
    if (n < 1) { // Перевірка на коректність n
        cout << "n повинно бути натуральним числом." << endl;
        return; // Завершуємо функцію у разі некоректного введення
    }

    double sum = 0; // Змінна для обчислення суми
    for (int k = 0; k <= n; k++) { // Цикл для обчислення членів ряду
        double numerator = k * (k + 1) - pow(x, k); // Чисельник
        double denominator = pow(x, 2 * k + 1);     // Знаменник
        double term = numerator / denominator;       // Поточний член ряду
        sum += term;                                 // Додавання члена до суми

        // Виведення кожного третього або четвертого елемента в залежності від парності n
        if (n % 2 == 0 && k % 3 == 0) { 
            cout << "Третій елемент (k = " << k << "): " << term << endl;
        }
        if (n % 2 != 0 && k % 4 == 0) { 
            cout << "Четвертий елемент (k = " << k << "): " << term << endl;
        }
    }

    cout << "Значення суми: " << sum << endl; // Виведення результату суми
}

// Функція для виконання третього завдання
void task3() {
    const double epsilon = 1e-10; // Мала величина для збіжності ряду (ε)
    const double g = 1e5;         // Поріг для розбіжності ряду (g)
    double sum = 0.0;             // Поточна сума ряду
    double term;                  // Поточний член ряду (un)
    int n = 1;                    // Лічильник номеру члена ряду

    do {
        term = pow(5.0, n) / (sqrt(n) * pow(2.0, n - 1)); // Обчислення поточного члена ряду

        if (fabs(term) > g) { 
            cout << "Ряд розбіжний. Сума перевищує поріг g." << endl;
            break; // Завершуємо цикл у разі розбіжності ряду
        }

        sum += term; // Додавання члена до суми
        n++;         // Інкремент номеру члена ряду
    } while (fabs(term) >= epsilon); // Умова завершення циклу

    if (fabs(term) < epsilon) { 
        cout.precision(10);     // Встановлення точності виводу результату
        cout << "Ряд збіжний. Сума: " << sum << endl;
    }

    cout << "Кількість членів ряду: " << n - 1 << endl; // Виведення кількості членів ряду
}

int main() {
    int choice; // Змінна для зберігання вибору користувача
    do {
        cout << "Оберіть завдання: ";
        cin >> choice; // Вибір користувача

        switch(choice) {
            case 1:
                task_geom30(); // Виклик першого завдання
                break;
            case 2:
                task2(); // Виклик другого завдання
                break;
            case 3:
                task3(); // Виклик третього завдання
                break;
            default:
                cout << "Неправильний вибір. Спробуйте ще раз.\n"; 
                break;
        }
        
    } while(choice != 4); // Цикл продовжується, поки користувач не вибере вихід

    return 0;
}