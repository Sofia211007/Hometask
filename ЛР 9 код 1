#include <iostream>
#include <string>
#include <sstream>
#include "tasks.h"

using namespace std;

const int max_size = 200; // Максимальний розмір рядка

// Завдання 1: демонстрація методу rfind для string і власна реалізація
void task1() {
    char cstr[max_size];
    int len = 0;

    cout << "Enter a string -> ";
    cin.getline(cstr, max_size);

    string str = cstr;
    len = (int)str.length();

    cout << "Output string -> " << str << endl;

    // Виклик методу rfind для string, шукаємо останнє входження символу 'a'
    size_t pos = str.rfind('a');
    if (pos == string::npos)
        cout << "Symbol 'a' was not found with string::rfind" << endl;
    else
        cout << "Position of the last occurance of 'a' (string::rfind): " << pos << endl;

    // Виклик власної функції, що надрукує позицію останнього входження символу 'a'
    my_string_method(cstr, len);
}

// Власна реалізація аналога rfind для масиву символів
void my_string_method(char input[], int& len) {
    char c = 'a'; // Символ для пошуку
    int pos = -1; // Ініціалізація позиції як -1 - не знайдено

    for (int i = 0; i < len; i++) {
        if (input[i] == c) {
            pos = i; // Запам'ятовуємо останню позицію
        }
    }

    if (pos == -1)
        cout << "Symbol 'a' was not found by it`s funktion" << endl;
    else
        cout << "Position of the last occurance of 'a': " << pos << endl;
}

// Завдання 2: робота з реченням, знаходження найкоротшого слова
void task2() {
    string sentence;
    cout << "Enter a sentence in English -> ";
    getline(cin, sentence);

    // Перевірка валідності рядка
    if (!is_valid_sentence(sentence)) {
        cout << "Wrong input!" << endl;
        return;
    }

    // Пошук і вивід найкоротшого слова (останній серед найкоротших)
    string shortest = find_shortest_word(sentence);
    cout << "Shortest word in a sentence: " << shortest << endl;
}

// Перевірка, що речення не порожнє
bool is_valid_sentence(const string& sentence) {
    return !sentence.empty();
}

// Пошук найкоротшого слова в реченні
// Якщо є кілька однакової мінімальної довжини, повертає останнє серед них
string find_shortest_word(const string& sentence) {
    stringstream ss(sentence);
    string word;
    string shortest_word;
    size_t min_len = SIZE_MAX;

    while (ss >> word) {
        // Видалення розділових знаків на кінцях слова (пунктуація)
        while (!word.empty() && (ispunct(word.back()) || word.back() == ' ')) {
            word.pop_back();
        }
        while (!word.empty() && (ispunct(word.front()) || word.front() == ' ')) {
            word.erase(0, 1);
        }
        if (word.empty()) continue;

        if (word.length() <= min_len) {
            min_len = word.length();
            shortest_word = word;
        }
    }
    return shortest_word;
}

// Вставка пробілів після кожного символу рядка
void insert_blanks(string& str) {
    int i = 0;
    while (i < (int)str.length()) {
        str.insert(i + 1, 1, ' ');
        i += 2;
    }
}

// Перевірка, чи немає пробілів у рядку
bool is_valid(string str) {
    if (str.empty()) return false;
    for (char c : str) {
        if (c == ' ') return false;
    }
    return true;
}
